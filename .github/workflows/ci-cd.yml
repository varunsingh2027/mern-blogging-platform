name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci
        
    - name: Run ESLint (Server)
      run: cd server && npm run lint
      
    - name: Run ESLint (Client)
      run: cd client && npm run lint
      
    - name: Check Prettier formatting
      run: |
        cd server && npm run format:check
        cd ../client && npm run format:check

  # Backend Tests
  test-server:
    name: Server Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install server dependencies
      run: cd server && npm ci
      
    - name: Run server tests
      run: cd server && npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/blog_test
        JWT_SECRET: test_jwt_secret
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./server/coverage
        flags: server

  # Frontend Tests
  test-client:
    name: Client Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install client dependencies
      run: cd client && npm ci
      
    - name: Run client tests
      run: cd client && npm test -- --coverage --watchAll=false
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./client/coverage
        flags: client

  # Build Tests
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-server, test-client]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd server && npm ci
        cd ../client && npm ci
        
    - name: Build client
      run: cd client && npm run build
      
    - name: Test server start
      run: cd server && timeout 10s npm start || true

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd server && npm ci
        cd ../client && npm ci
        
    - name: Run security audit (Server)
      run: cd server && npm audit --audit-level=high
      
    - name: Run security audit (Client)
      run: cd client && npm audit --audit-level=high

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build server Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: false
        tags: blog-server:test
        
    - name: Build client Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: false
        tags: blog-client:test

  # Deploy to Staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-audit, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  # Deploy to Production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-audit, docker-build]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-domain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Notify deployment
      if: success()
      run: |
        echo "ðŸš€ Successfully deployed to production!"
